{"version":3,"sources":["components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","DrawerForm","state","visible","name","showDrawer","_this","setState","onClose","onSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","target","getFieldDecorator","this","react_default","a","createElement","es_button","type","onClick","icon","drawer","title","width","style","overflow","height","paddingBottom","textAlign","es_form","layout","hideRequiredMark","row","gutter","col","span","Item","label","initialValue","rules","required","message","input","placeholder","es_select","value","date_picker","getPopupContainer","trigger","parentNode","format","TextArea","rows","position","left","bottom","borderTop","padding","background","marginRight","React","Component","Profile","Form","create","App","components_Profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7049544.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Drawer, Form, Button, Col, Row, Input, Select, DatePicker, Icon,\n} from 'antd';\n\nconst { Option } = Select;\n\nclass DrawerForm extends React.Component {\n  state = { visible: false,\n            name : \"rijul\"\n            };\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n        console.log('name: ', e.target);;\n      }\n    });\n    this.setState({\n      visible: false,\n    });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showDrawer}>\n          <Icon type=\"plus\" /> create profile\n        </Button>\n        <Drawer\n          title=\"Create a New Profile\"\n          width={720}\n          onClose={this.onClose}\n          visible={this.state.visible}\n          style={{\n            overflow: 'auto',\n            height: 'calc(100% - 108px)',\n            paddingBottom: '108px',\n            textAlign: 'center',\n          }}\n        >\n          <Form layout=\"vertical\" hideRequiredMark>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"Name\">\n                  {getFieldDecorator('name', {\n                    initialValue: this.state.name,\n                    rules: [{ required: true, message: 'Please enter Name' }],\n                  })(<Input placeholder=\"Please enter Name\" />)}\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item label=\"Email\">\n                  {getFieldDecorator('email', {\n                    rules: [{ required: true, message: 'Please enter Email' }],\n                  })(\n                    <Input\n                      style={{ width: '100%' }}\n                      placeholder=\"Please enter Email\"\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"Gender\">\n                  {getFieldDecorator('gender', {\n                    rules: [{ required: true, message: 'Please select Gender' }],\n                  })(\n                    <Select placeholder=\"Please select Gender\">\n                      <Option value=\"male\">Male</Option>\n                      <Option value=\"female\">Female</Option>\n                    </Select>\n                  )}\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item label=\"Birthday\">\n                  {getFieldDecorator('birthday', {\n                    rules: [{ required: true, message: 'Please enter Birthday' }],\n                  })(\n                    <DatePicker\n                      style={{ width: '100%' }}\n                      getPopupContainer={trigger => trigger.parentNode}\n                      format=\"DD-MM-YYYY\"\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"Phone Number\">\n                  {getFieldDecorator('phone', {\n                    rules: [{ required: true, message: 'Please enter Phone Number' }],\n                  })(<Input placeholder=\"Please enter Phone Number\" />)}\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={24}>\n                <Form.Item label=\"Bio\">\n                  {getFieldDecorator('bio', {\n                    rules: [\n                      {\n                        required: true,\n                        message: 'please enter your Bio',\n                      },\n                    ],\n                  })(<Input.TextArea rows={4} placeholder=\"please enter your Bio\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n          <div\n            style={{\n              position: 'absolute',\n              left: 0,\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e9e9e9',\n              padding: '10px 16px',\n              background: '#fff',\n              textAlign: 'right',\n            }}\n          >\n            <Button onClick={this.onClose} style={{ marginRight: 8 }}>\n              Cancel\n            </Button>\n            <Button onClick={this.onSubmit} type=\"Submit\">\n              Submit\n            </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nconst Profile = Form.create()(DrawerForm);\n\nexport default Profile;\n","import React, { Component } from 'react';\nimport Profile from './components/Profile';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Profile />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}